
   model{
    
  ## Define prior distributions for community-level model parameters
  ## The parameter estimating the prob that a species is included in the 'hyper community'
  
  omega ~ dunif(0,1)

  ## Prior for the community level hyper parameter on mean occupancy

  u.mean ~ dunif(0,1)
  mu.u <- log(u.mean) - log(1-u.mean)

  ## Prior for the community level hyper parameter on mean detection

  v.mean ~ dunif(0,1)
  mu.v <- log(v.mean) - log(1-v.mean)

  ## Prior for the community level hyper parameter for precision of occupancy and detection
  
  tau.u ~ dgamma(0.1,0.1)
  tau.v ~ dgamma(0.1,0.1)

  ## Prior for intercept on phi

  phi0 ~ dunif(0,1)

  ## Prior for interecept on gamma

  gam0 ~ dunif(0,1)

  ### Priors for detection coefficients
    p.date ~ dnorm(0,0.001)
    p.time ~ dnorm(0,0.001)
    #p.obs ~ dnorm(0,0.001)
  
  ### Loop over all species i (including the n observed species and the nzeroes nonobserved species
  ### that may or may not be in the hyper community
  
  for (i in 1:(n+nzeroes)) {
    #### Create priors for species i from the community level prior distributions
    
    ##### Binary variable indicating whether a species is in fact in the hyper community
    ##### will always be a 1 if at least one individual was detected
    
    w[i] ~ dbern(omega)
    
    ##### Prior distribution for intercept term of species occupancy 
    u[i] ~ dnorm(mu.u, tau.u)
    
    ##### Prior distribution for intercept term of species detection
    v[i] ~ dnorm(mu.v, tau.v)

    ### Create a loop to estimate the Z matrix (true occurrence for species i 
    ### at point j) for all J sites.    
    
    ##### Occurence, year 1
    
    for (j in 1:J) {
      for(y in 1:Y) {
      logit(psi[j,1,i]) <- u[i]
      mu.psi.1[j,1,i] <- psi[j,1,i] * w[i]
      Z[j,1,i] ~ dbern(mu.psi.1[j,1,i])


    ##### Occurence in subsequent years
        for(m in 1:2) {
          for(d in 1:7) {
    
    ##### rate of persistence (phi)
    ###### priors
      phi.migrate[m] ~ dnorm(0,0.001)
      gam.migrate[m] ~ dnorm(0,0.001)
      phi.diet[d] ~ dnorm(0,0.001)
      gam.diet[d] ~ dnorm(0,0.001)

      logit(phi[j,i]) <- phi0 + phi.migrate[m]*migrantGroup[i] + phi.diet[d]*dietGroup[i]

    ##### rate of colonization (gamma)

      logit(gam[j,i]) <- gam0 + gam.migrate[m]*migrantGroup[i] + gam.diet[d]*dietGroup[i]
          
          } #diet
        } #migrate

    ##### occurrence in year 2
      
      psi[j,2,i] <- (Z[j,2,i] * phi[j,i] + (1 - Z[j,2,i]) * gam[j,i])
      Z[j,2,i] ~ dbern(psi[j,2,i])

    ##### Detection

      for (k in 1:K[j]) {
        for (o in 1:7) {
      p.obs[o] ~ dnorm(0,0.001)
      logit(p[j,y,k,i]) <- v[i] + p.date[date.array[j,y,k]] + p.time[time.array[j,y,k]] + p.obs[o]*obs.array[j,y,k]
      mu.y[j,y,k,i] <- p[j,y,k,i]*Z[j,y,i]
        } #observer

    ##### Observed deviance

      dev[j,y,k,i] <- y[j,y,k,i]*log(mu.y[j,y,k,i]) + (1-y[j,y,k,i])*log(1-mu.y[j,y,k,i])

    ###### Predict new observation and compute deviance

      y.new[j,y,k,i] ~ dbern(mu.y[j,y,k,i])
      dev.sim[j,y,k,i] <- y.new[j,y,k,i]*log(mu.y[j,y,k,i]) + (1-y.new[j,y,k,i])*log(1-mu.y[j,y,k,i])

      } #rep
    } #year
  } # site
} #species

    ### Derived values
   
    sum.dev <- sum(dev[,,,])
    sum.dev.sim <- sum(dev.sim[,,,])

    test <- step(sum.dev.sim - sum.dev)
    bpvalue <- mean(test)


    #### Sum all species observed (n) and unobserved species (n0) to find the 
    #### total estimated richness
    
    n0 <- sum(w[(n+1):(n+nzeroes)])
    N <- n + n0
    
    #### Create a loop to determine point level richness estimates for the 
    #### whole community and for subsets or assemblages of interest.
    
    for(j in 1:J){
      for(y in 1:Y){
    Nsite[j]<- inprod(Z[j,y,1:(n+nzeroes)],w[1:(n+nzeroes)])
      } # j
    } #y

#Finish writing the text file into a document we call covarmodel.txt
} #model

